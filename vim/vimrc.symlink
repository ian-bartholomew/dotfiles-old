" ------ Core ---------

set nocompatible
filetype on
syntax on
syntax enable           " enable syntax processing
set autoread                     " Manually refresh file
set backspace=indent,eol,start   " Intuitive backspacing.
set clipboard=unnamed            " Normal OS clipboard interaction
set copyindent                   " Copy the last indent on autoindent
set eol                          " Add new line to end of file on save
set history=100         " only remember 100 commands
set hlsearch            " highlight matches
set ignorecase          " ignore case when searching
set incsearch           " search as characters are entered
set lazyredraw          " redraw only when we need to.
set nobackup             " we dont need a backup
set noerrorbells         " don't beep
set noswapfile           " we dont need swp files
set nowrap              " don't wrap lines
set showcmd             " show command in bottom bar
set smartcase           " ignore case if search pattern is all lowercase,
set title                " change the terminal's title
set ttyfast             " send more chars to the term at once
set visualbell           " don't beep
set wildignore=*.swp,*.bak,*.pyc,*.class
set wildmenu            " visual autocomplete for command menu

" ---- Indentation ------

filetype indent on      " load filetype-specific indent files
set expandtab           " tabs are spaces
set softtabstop=2       " number of spaces in tab when editing
set tabstop=2           " number of visual spaces per TAB
set smartindent
set autoindent

" ------ Theme ---------

colorscheme Tomorrow-Night
set t_Co=256                      " Use 256 Colors
set background=dark
set guifont=Menlo\ Regular:h18
set colorcolumn=90
set number
set cursorcolumn                 " add a vertical cursor highlight
set cursorline          " highlight current line
set showmatch           " highlight matching [{()}]
" highlight white spaces
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.

let g:airline_theme='gruvbox'

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}%{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1

" Always show statusline
set laststatus=2

" ------ Folding --------
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
set foldmethod=indent   " fold based on indent level


" ------ Plugins ---------

call plug#begin('~/.vim/plugged')

Plug 'Raimondi/delimitMate'
Plug 'SirVer/ultisnips'
Plug 'airblade/vim-gitgutter'
Plug 'alvan/vim-closetag'
Plug 'cakebaker/scss-syntax.vim', {'for': 'scss'}
Plug 'davidhalter/jedi-vim', {'for': 'python'}
Plug 'elzr/vim-json', { 'for': 'json' }
Plug 'jordwalke/AutoComplPop'
Plug 'jordwalke/VimCompleteLikeAModernEditor'
Plug 'junegunn/vim-easy-align'
Plug 'kchmck/vim-coffee-script', {'for': ['coffee'] }
Plug 'kien/ctrlp.vim'
Plug 'mileszs/ack.vim'
Plug 'moll/vim-node', { 'for': 'javascript' }
Plug 'morhetz/gruvbox'
Plug 'mxw/vim-jsx', { 'for': [ 'jsx', 'javascript' ] }
Plug 'ngmy/vim-rubocop', { 'for': 'ruby' }
Plug 'othree/es.next.syntax.vim', {'for': 'javascript'}
Plug 'othree/html5.vim', { 'for': ['html', 'css']}
Plug 'othree/jsdoc-syntax.vim', { 'for': 'javascript' }
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'tpope/vim-endwise', {'for': 'ruby'}
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails', {'for': 'ruby'},
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-syntastic/syntastic'
Plug 'vim-ruby/vim-ruby', {'for': 'ruby'},
Plug 'vim-scripts/BufOnly.vim'
Plug 'w0rp/ale', {'for': ['javascript', 'python', 'ruby', 'coffee']},


" Initialize plugin system
call plug#end()

" ---- Bindings -----------

" Reload vim config
map <leader>sv :source ~/.vimrc<CR>
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>
" space open/closes folds
nnoremap <space> za

" call cx + co for omnicompletion
inoremap <C-Space> <C-x><C-o>
inoremap <C-@> <c-x><c-o>

"Better window navigation
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l


" hh to generate new horizontal split
"nnoremap <silent> hs <C-w>s
" vv to generate new vertical split
nnoremap <silent> vv <C-w>v

" Lets break some bad habits
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" buffers
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" Pull word under cursor into LHS of a substitute (for quick search and
" replace)
nmap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

" fix for fat fingering
:command WQ wq
:command Wq wq
:command Qa qa
:command W w
:command Q q


" ------ AutoCmd ----------
" Auto clear whitespaces on save
autocmd BufWritePre * :%s/\s\+$//e


"--------- PLUGIN OPTS ---------

" Plugin 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UlltSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']

" Plugin NERDTree

" Ignore .pyc files in NERDTree
let NERDTreeIgnore=['\.pyc$', '\~$']

nmap ,n :NERDTreeFind<CR>
nmap ,m :NERDTreeToggle<CR>

" VimCompleteLikeAModernEditor
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" ACK
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

noremap <leader>a :Ack<space>
" search for the current word in ack
noremap <leader>as :Ack <C-r><C-w>

" Airline status line
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='minimalist'

function ALE() abort
  return exists('*ALEGetStatusLine') ? ALEGetStatusLine() : ''
endfunction
let g:airline_section_error = '%{ALE()}'

" ALE
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

" Write this in your vimrc file
let g:ale_lint_on_text_changed = 'never'
" You can disable this option too
" if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0

" ctrlp plugin
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore ='.DS_Store\|.sass-cache\|bower_components\|node_modules\|\v[\/]\.(git|hg|svn)$'

"nmap [ :CtrlP<CR>
nmap - :CtrlP<CR>
nmap ] :CtrlPBuffer<CR>]

" Deliminate
au FileType eruby let b:delimitMate_autoclose = 0

" syntastic
let g:syntastic_python_checkers = ['pylint']

" vim-easy-align
let g:easy_align_ignore_groups = []

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" vim-closetag filenames
let g:closetag_filenames = "*.cjsx,*.html,*.xhtml,*.phtml,*.jsx,*.js,*.erb"

